//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartH2O_DLog.ServiceLogWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceLogWebService.IServiceLog")]
    public interface IServiceLog {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/DoWork", ReplyAction="http://tempuri.org/IServiceLog/DoWorkResponse")]
        string DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/DoWork", ReplyAction="http://tempuri.org/IServiceLog/DoWorkResponse")]
        System.Threading.Tasks.Task<string> DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/SendValues", ReplyAction="http://tempuri.org/IServiceLog/SendValuesResponse")]
        string SendValues(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/SendValues", ReplyAction="http://tempuri.org/IServiceLog/SendValuesResponse")]
        System.Threading.Tasks.Task<string> SendValuesAsync(string data);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetAllValues", ReplyAction="http://tempuri.org/IServiceLog/GetAllValuesResponse")]
        string GetAllValues();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetAllValues", ReplyAction="http://tempuri.org/IServiceLog/GetAllValuesResponse")]
        System.Threading.Tasks.Task<string> GetAllValuesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesBySensorName", ReplyAction="http://tempuri.org/IServiceLog/GetValuesBySensorNameResponse")]
        string GetValuesBySensorName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesBySensorName", ReplyAction="http://tempuri.org/IServiceLog/GetValuesBySensorNameResponse")]
        System.Threading.Tasks.Task<string> GetValuesBySensorNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesByDate", ReplyAction="http://tempuri.org/IServiceLog/GetValuesByDateResponse")]
        string GetValuesByDate(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesByDate", ReplyAction="http://tempuri.org/IServiceLog/GetValuesByDateResponse")]
        System.Threading.Tasks.Task<string> GetValuesByDateAsync(string date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesByDateAndHour", ReplyAction="http://tempuri.org/IServiceLog/GetValuesByDateAndHourResponse")]
        string GetValuesByDateAndHour(string date, string hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesByDateAndHour", ReplyAction="http://tempuri.org/IServiceLog/GetValuesByDateAndHourResponse")]
        System.Threading.Tasks.Task<string> GetValuesByDateAndHourAsync(string date, string hour);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesBetweenDate", ReplyAction="http://tempuri.org/IServiceLog/GetValuesBetweenDateResponse")]
        string GetValuesBetweenDate(string date1, string date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetValuesBetweenDate", ReplyAction="http://tempuri.org/IServiceLog/GetValuesBetweenDateResponse")]
        System.Threading.Tasks.Task<string> GetValuesBetweenDateAsync(string date1, string date2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/SendAlarm", ReplyAction="http://tempuri.org/IServiceLog/SendAlarmResponse")]
        string SendAlarm(string docc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/SendAlarm", ReplyAction="http://tempuri.org/IServiceLog/SendAlarmResponse")]
        System.Threading.Tasks.Task<string> SendAlarmAsync(string docc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetAllAlmars", ReplyAction="http://tempuri.org/IServiceLog/GetAllAlmarsResponse")]
        string GetAllAlmars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceLog/GetAllAlmars", ReplyAction="http://tempuri.org/IServiceLog/GetAllAlmarsResponse")]
        System.Threading.Tasks.Task<string> GetAllAlmarsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceLogChannel : SmartH2O_DLog.ServiceLogWebService.IServiceLog, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceLogClient : System.ServiceModel.ClientBase<SmartH2O_DLog.ServiceLogWebService.IServiceLog>, SmartH2O_DLog.ServiceLogWebService.IServiceLog {
        
        public ServiceLogClient() {
        }
        
        public ServiceLogClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceLogClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLogClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceLogClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string DoWork() {
            return base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task<string> DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public string SendValues(string data) {
            return base.Channel.SendValues(data);
        }
        
        public System.Threading.Tasks.Task<string> SendValuesAsync(string data) {
            return base.Channel.SendValuesAsync(data);
        }
        
        public string GetAllValues() {
            return base.Channel.GetAllValues();
        }
        
        public System.Threading.Tasks.Task<string> GetAllValuesAsync() {
            return base.Channel.GetAllValuesAsync();
        }
        
        public string GetValuesBySensorName(string name) {
            return base.Channel.GetValuesBySensorName(name);
        }
        
        public System.Threading.Tasks.Task<string> GetValuesBySensorNameAsync(string name) {
            return base.Channel.GetValuesBySensorNameAsync(name);
        }
        
        public string GetValuesByDate(string date) {
            return base.Channel.GetValuesByDate(date);
        }
        
        public System.Threading.Tasks.Task<string> GetValuesByDateAsync(string date) {
            return base.Channel.GetValuesByDateAsync(date);
        }
        
        public string GetValuesByDateAndHour(string date, string hour) {
            return base.Channel.GetValuesByDateAndHour(date, hour);
        }
        
        public System.Threading.Tasks.Task<string> GetValuesByDateAndHourAsync(string date, string hour) {
            return base.Channel.GetValuesByDateAndHourAsync(date, hour);
        }
        
        public string GetValuesBetweenDate(string date1, string date2) {
            return base.Channel.GetValuesBetweenDate(date1, date2);
        }
        
        public System.Threading.Tasks.Task<string> GetValuesBetweenDateAsync(string date1, string date2) {
            return base.Channel.GetValuesBetweenDateAsync(date1, date2);
        }
        
        public string SendAlarm(string docc) {
            return base.Channel.SendAlarm(docc);
        }
        
        public System.Threading.Tasks.Task<string> SendAlarmAsync(string docc) {
            return base.Channel.SendAlarmAsync(docc);
        }
        
        public string GetAllAlmars() {
            return base.Channel.GetAllAlmars();
        }
        
        public System.Threading.Tasks.Task<string> GetAllAlmarsAsync() {
            return base.Channel.GetAllAlmarsAsync();
        }
    }
}
